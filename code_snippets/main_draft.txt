-----------------------------------------------------------------------------

4.6.1. Enrolling an Additional Factor

Enrolling an additional authentication factor always happens separate from
Account creation, so the process is the same regardless of whether you are
creating a factor for an existing Account or one that was just created.
For this example, we will create a new Account in Stormpath, then add an
additional Factor resource to it.

First, you create the Account:

  >> insert our code snippet here 4.6.1.1


** Adding an SMS Factor **

To add an additional SMS Factor to this Account, you send the following
request:

  >> insert our code snippet here 4.6.1.2

For now the `sms_factor.verification_status` is UNVERIFIED and
`sms_factor.most_recent_challenge` is `null`. If you were to send a challenge
this Factor, `sms_factor.most_recent_challenge` would return the actual
`Challenge` instance. If that challenge was successful,
`sms_factor.verification_status` would change to `VERIFIED`.


** Adding a Google Authenticator Factor **

To add an additional Google Authenticator Factor to this Account, you must
send the following request:

  >> insert our code snippet here 4.6.1.3

The user now needs to get this information into their Google Authenticator
(or similar) application. The easiest way to do that is to use their app to
scan a QR code. Stormpath makes this easy by giving you the QR Code in the
base64QRImage field of the Google Authenticator Factor.

You can now take this string and turn it into a QR Code image:

  - You could use a QR Code Library, such as QRCode.js
  - Or you could generate the image yourself, using an <img> tag or CSS.
    For examples of both, see here.

Once the image is generated, the user will scan it into their Authenticator
app. If you ask them for a code, they will go into the app and find the code
for your application. For information about what happens with this code, see
below.

-----------------------------------------------------------------------------

4.6.2. Challenging a Factor

At this point in the example you have a brand new Account with two additional
Factors.

If you were to retrieve the Account’s `factors` you will get them:

    >> insert our code snippet here 4.6.2.1

You will now challenge each of these factors.


** Challenging After Factor Creation **

This example covers challenging Factors that have already been created.
To see an example of how to challenge a Factor at the same time as you are
creating it, please see below.


** Challenging an SMS Factor **

To challenge an SMS Factor, call `sms_factor.challenge_factor()` with or
without setting a message.

This operation will automatically cause the factor to be challenged, meaning
that the user will receive a code as soon as this operation is executed.

    >> insert our code snippet here 4.6.2.2

If you do not specify a message, then Stormpath will just send the default
message: `"Your verification code is ${code}"`.

The resulting SMS would look like this:

    >> insert image

This code will remain valid for 300 seconds (5 minutes).

Next, you must collect this code from the user.

Once you have the code, you send it to the same Challenge you created above:

    >> insert our code snippet here 4.6.2.3

If the code is valid, `challenge.status` should be `SUCCESS`.
If you had sent the wrong code, `challenge.status` would instead be `FAILED`.

>>DOUBLE CHECK OAUTH2 FLOW NOTE<<


** Challenging a Google Authenticator Factor **

When you created the Google Authenticator Factor, you also generated a QR Code
image for your user to scan into their app. Challenging this factor now only
requires you to prompt to enter in the code from their Authenticator app.

Unlike the SMS challenge process, the Google Authenticator challenge process
does not require you to create a Challenge resource. Instead, the Challenge is
created and verified in one step. That's why in this example, we pass the
activation code to the `google_factor.challenge_factor()`. `code` can only be
passed like this if Factor `type` is `google-authenticator`. If `code`
parameter is missing when challenging a google authenticator factor,
an error will be raised. For more information about the Challenge resource,
see the Reference chapter.

Once you have collected the code from the user, send the code generated by
your Google Authenticator app:

    >> insert our code snippet here 4.6.2.4

If the code is correct, Stormpath will now simultaneously create the Challenge
resource and set its status to SUCCESS, then return it back to you:

    >> insert our code snippet here 4.6.2.5


** Challenging During Factor Creation **

    >> USE NOTE ALREADY PROVIDED <<

To create a Challenge at the same time as you create the SMS Factor, you can
use this builder:

    >> insert our code snippet here 4.6.2.6

This would create a Factor and a challenge with the default message.

If you wanted to specify a custom message instead, you would need :

    >> insert our code snippet here 4.6.2.7

You are telling Stormpath to send an SMS to the phone number `1-222-333-4444`
along with the message `"For the sake of example, your code is ${code}"`.
The placeholder `${code}` will be replaced with a one-time password generated
using the HOTP algorithm.


** Challenging a Factor After Login **

The first step will be getting the user authenticated.

    >> insert code snippet here authenticate_user_4.6.2.8.py

If authentication is successful, you will get back the Account.

Next, you will need to retrieve the Account’s `factors` collection, where you
can access the factor we wish to challenge:

    >> insert code snippet here retrieve_factor_4.6.2.9.py

You would then challenge the factor which would generate a new Challenge and
send an SMS message to the number specified in the Factor’s Phone resource.

    >> insert code snippet here challenge_login_factor_4.6.2.10.py
